version: 2
jobs:
  build:
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/gke
    steps:
      - checkout
      - run:
          name: Store Service Accounts
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            chmod 600 $HOME/gcloud-service-key.json

      - run:
          name: Setup Cluster and Ingress
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet components install kubectl beta

            gcloud --quiet beta container clusters create ${GOOGLE_CLUSTER_NAME} \
              --region ${GOOGLE_COMPUTE_ZONE} --username "admin" --enable-stackdriver-kubernetes \
              --cluster-version "$KUBERNETES_ENGINE_VERSION" --machine-type "f1-micro" \
              --issue-client-certificate --image-type "COS" --disk-type "pd-standard" \
              --service-account "circleci@${GOOGLE_PROJECT_ID}.iam.gserviceaccount.com" \
              --enable-ip-alias --num-nodes "1" --network "default" --disk-size "10" \
              --subnetwork "default" --enable-autoupgrade --enable-autorepair \
              --addons HorizontalPodAutoscaling,HttpLoadBalancing,KubernetesDashboard

            gcloud --quiet beta container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

            if [[ ! -z $DOCKER_USERNAME ]]; then
              kubectl delete secret dockerhub-creds || true
              kubectl create secret docker-registry dockerhub-creds \
                --docker-server=https://index.docker.io/v1/ \
                --docker-username=$DOCKER_USERNAME \
                --docker-password=$DOCKER_PASSWD \
                --docker-email=$DOCKER_EMAIL
            fi

      - run:
          name: Setup networking incl. SSL certs, IP addresses & Ingress
          command: |
            if "$SSL_ENABLED"; then
              # Setup SSL certs with cert-bot
              apk add -U python2 augeas gcc python2-dev musl-dev libffi-dev openssl-dev py2-pip jq
              cd /root/
              wget https://github.com/certbot/certbot/archive/v0.27.1.tar.gz
              tar -xzf ./v0.27.1.tar.gz
              cd certbot-0.27.1
              pip install ./
              cd certbot-dns-google
              python setup.py install

              if [ -z "$CERTBOT_CSV_ALL_DOMAINS" ]; then
                export CERTBOT_CSV_ALL_DOMAINS=$PRIMARY_DOMAIN
              fi
              certbot certonly --email $CERTBOT_EMAIL --rsa-key-size 2048 \
                --agree-tos --non-interactive \
                --dns-google --dns-google-propagation-seconds 70 \
                --dns-google-credentials $HOME/gcloud-service-key.json \
                -d "$CERTBOT_CSV_ALL_DOMAINS"

              export TLS_SECRET=${PRIMARY_DOMAIN/./-}
              kubectl create secret tls $TLS_SECRET-tls \
                --cert=/etc/letsencrypt/live/$PRIMARY_DOMAIN/fullchain.pem \
                --key=/etc/letsencrypt/live/$PRIMARY_DOMAIN/privkey.pem
            fi

            # IPV4 is used to create the Ingress
            gcloud compute addresses delete homepage-ipv4 --global --quiet || true
            gcloud compute addresses create homepage-ipv4 --global \
              --ip-version IPV4 || true

            if "$IPV6_ENABLED"; then
              gcloud compute addresses delete homepage-ipv6 --global --quiet || true
              gcloud compute addresses create homepage-ipv6 --global \
                --ip-version IPV6 || true
            fi

            export GCLOUD_DNS_ZONE_NAME=${PRIMARY_DOMAIN//.}
            # update Cloud DNS A / AAAA records according to the new values
            gcloud dns record-sets transaction start -z=$GCLOUD_DNS_ZONE_NAME
            gcloud dns record-sets transaction remove -z=$GCLOUD_DNS_ZONE_NAME \
              --name="$PRIMARY_DOMAIN." \
              --type=A \
              --ttl=300 `gcloud dns record-sets list -z=$GCLOUD_DNS_ZONE_NAME --format json | jq -r --arg PRIMARY_DOMAIN "$PRIMARY_DOMAIN." '.[] | select(.name == $PRIMARY_DOMAIN) + select(.type == "A") | .rrdatas[0]?'`
            gcloud dns record-sets transaction add -z=$GCLOUD_DNS_ZONE_NAME \
              --name="$PRIMARY_DOMAIN." \
              --type=A \
              --ttl=300 `gcloud compute addresses describe homepage-ipv4 --global --format json | jq '.address?' -r`
            if "$IPV6_ENABLED"; then
              gcloud dns record-sets transaction remove -z=$GCLOUD_DNS_ZONE_NAME \
                --name="$PRIMARY_DOMAIN." \
                --type=AAAA \
                --ttl=300 `gcloud dns record-sets list -z=$GCLOUD_DNS_ZONE_NAME --format json | jq -r --arg PRIMARY_DOMAIN "$PRIMARY_DOMAIN." '.[] | select(.name == $PRIMARY_DOMAIN) + select(.type == "AAAA") | .rrdatas[0]?'`
              gcloud dns record-sets transaction add -z=$GCLOUD_DNS_ZONE_NAME \
                --name="$PRIMARY_DOMAIN." \
                --type=AAAA \
                --ttl=300 `gcloud compute addresses describe homepage-ipv6 --global --format json | jq '.address?' -r`
            fi
            gcloud dns record-sets transaction execute -z=$GCLOUD_DNS_ZONE_NAME

            if [ -z "$SSL_ENABLED" ]; then
              sed -i '/tls:$/,$d' ~/gke/deploy.yaml
            else
              sed -i -e "s@{{TLS_SECRET}}@$TLS_SECRET@" ~/gke/deploy.yaml
            fi
            sed -i -e "s@{{PRIMARY_DOMAIN}}@$PRIMARY_DOMAIN@" ~/gke/deploy.yaml
            # Create the K8S Ingress
            kubectl apply -f ~/gke/deploy.yaml

            # sleep here while waiting for the Ingress to come up?
            sleep 30

            if "$IPV6_ENABLED"; then
              # assign the IPV6 to the Load Balancer created by the Ingress
              gcloud compute forwarding-rules list --format yaml > targets
              export HTTP_TARGET_PROXY=`cat targets | grep targetHttpProxies | awk -F"/" '{print $10}'`
              gcloud compute forwarding-rules create http-ipv6-rule \
                --ports 80 \
                --address homepage-ipv6 \
                --target-http-proxy $HTTP_TARGET_PROXY \
                --global

              if "$SSL_ENABLED"; then
                export HTTPS_TARGET_PROXY=`cat targets | grep targetHttpsProxies | awk -F"/" '{print $10}'`
                gcloud compute forwarding-rules create https-ipv6-rule \
                  --ports 443 \
                  --address homepage-ipv6 \
                  --target-https-proxy $HTTPS_TARGET_PROXY \
                  --global
              fi
            fi

      # Nice idea - but as of 1.10.7-gke.2, the Ingress creation (deploy.yaml) stalls waiting for these 2 services :(
      - run:
          name: Deploy apps
          command: |
            curl --user ${CIRCLE_API_TOKEN}: --data build_parameters[CIRCLE_JOB]=deploy \
              "https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/ackerson.de-go/tree/k8s"

            curl --user ${CIRCLE_API_TOKEN}: --data build_parameters[CIRCLE_JOB]=deploy \
              "https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/bender-slackbot/tree/k8s"
